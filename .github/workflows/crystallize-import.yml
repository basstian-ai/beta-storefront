name: Crystallize Import

on:
  workflow_dispatch:
  push:
    paths:
      - 'scripts/**'
      - 'crystallize-import/**'
      - '.github/workflows/crystallize-import.yml'
      - 'package.json'

jobs:
  import:
    runs-on: ubuntu-latest

    env:
      CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
      CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
      CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
      CI: true
      FORCE_COLOR: 0
      TERM: dumb

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: node-cache-v2-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: node-cache-v2-${{ runner.os }}-

      - run: pnpm install --frozen-lockfile

      # Build scripts approved locally; no interactive prompt in CI
      # - run: pnpm approve-builds --yes >/dev/null


      - name: Check import files

        run: |
          test -f crystallize-import/shapes/product.json
          test -f crystallize-import/priceVariants.json

      - name: Import to Crystallize
        timeout-minutes: 30
        env:
          CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
          CRYSTALLIZE_TENANT_ID:         ${{ secrets.CRYSTALLIZE_TENANT_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
          DEBUG: import-utilities:*
        run: |
          set -euo pipefail
          TENANT=${CRYSTALLIZE_TENANT_IDENTIFIER:-$CRYSTALLIZE_TENANT_ID}
          echo "ðŸš€  Importing into tenant: $TENANT"

          pnpm exec tsx scripts/dummy-to-crystallize.ts
          pnpm exec tsx scripts/import-spec.ts \
            | tee import.log \
            | tail -n 1 > import.json
          test -s import.json || { echo "::error::import.json empty" ; exit 1 ; }

      - name: Debug import output
        run: |
          echo "--- import.log ---"
          cat import.log || true
          echo "--- import.json ---"
          cat import.json


      - name: Fail when nothing was created
        run: |
          ITEMS=$(jq '.itemsCreated // 0' import.json 2>/dev/null || echo 0)
          if [ "$ITEMS" -eq 0 ]; then
            echo "::error::Import created 0 items" && exit 1
          fi

      - name: Smoke-test tenant
        env:
          CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
          CRYSTALLIZE_TENANT_ID:         ${{ secrets.CRYSTALLIZE_TENANT_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
        run: |
          curl -s -X POST "https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER:-$CRYSTALLIZE_TENANT_ID}/catalogue" \
            -H "x-crystallize-access-token-id:$CRYSTALLIZE_ACCESS_TOKEN_ID" \
            -H "x-crystallize-access-token-secret:$CRYSTALLIZE_ACCESS_TOKEN_SECRET" \
            -H "content-type: application/json" \
            -d '{"query":"{ catalogue(path:\"/iphone-9\", language:\"en\"){name} }"}' \
            | jq -e '.data.catalogue.name' >/dev/null
