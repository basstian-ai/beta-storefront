name: Crystallize Import

on:
  workflow_dispatch:
  push:
    paths:
      - 'scripts/**'
      - 'crystallize-import/**'
      - '.github/workflows/crystallize-import.yml'
      - 'package.json'

jobs:
  import:
    runs-on: ubuntu-latest

    env:
      CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
      CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
      CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
      CI: true
      FORCE_COLOR: 0
      TERM: dumb

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: node-cache-v2-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: node-cache-v2-${{ runner.os }}-

      - run: pnpm install --frozen-lockfile

      # Build scripts approved locally; no interactive prompt in CI
      # - run: pnpm approve-builds --yes >/dev/null

      # Removed "Check import files" step as shapes are no longer part of the spec

      - name: List and validate import spec
        run: |
          echo "Contents of crystallize-import/"
          ls -R crystallize-import || true
          echo "Validating JSON files"
          find crystallize-import -name '*.json' -print -exec jq empty {} \;

      - name: Import to Crystallize
        timeout-minutes: 30
        env:
          CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
          CRYSTALLIZE_TENANT_ID:         ${{ secrets.CRYSTALLIZE_TENANT_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
        run: |
          set -euo pipefail
          TENANT=${CRYSTALLIZE_TENANT_IDENTIFIER:-$CRYSTALLIZE_TENANT_ID} # This can stay for echo
          echo "ðŸš€  Generating item files for tenant: $TENANT"
          pnpm exec tsx scripts/dummy-to-crystallize.ts # Ensure item files are generated

          echo "ðŸš€  Importing items only for tenant: $TENANT"
          pnpm dlx @crystallize/import-utilities \
            import \
            --spec-directory crystallize-import \
            --tenant-identifier "${{ env.CRYSTALLIZE_TENANT_IDENTIFIER || env.CRYSTALLIZE_TENANT_ID }}" \
            --access-token-id   "${{ env.CRYSTALLIZE_ACCESS_TOKEN_ID }}" \
            --access-token-secret "${{ env.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}" \
            --skip-shapes \
            --log-level info \
            --output import.json

          test -s import.json || { echo "::error::import.json empty after CLI import" && exit 1 ; }

      - name: Add delay for eventual consistency
        run: |
          echo "Waiting 30 seconds for Crystallize to process items..."
          sleep 30

      - name: Fail when nothing was created
        run: |
          ITEMS=$(jq '.importedItems // 0' import.json 2>/dev/null || echo 0)
          if [ "$ITEMS" -eq 0 ]; then
            echo "::error::Import created 0 items" && exit 1
          fi

      - name: Smoke-test tenant
        env:
          CRYSTALLIZE_TENANT_IDENTIFIER: ${{ secrets.CRYSTALLIZE_TENANT_IDENTIFIER }}
          CRYSTALLIZE_TENANT_ID:         ${{ secrets.CRYSTALLIZE_TENANT_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_ID:   ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_ID }}
          CRYSTALLIZE_ACCESS_TOKEN_SECRET: ${{ secrets.CRYSTALLIZE_ACCESS_TOKEN_SECRET }}
        run: |
          curl -s -X POST "https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER:-$CRYSTALLIZE_TENANT_ID}/catalogue" \
            -H "x-crystallize-access-token-id:$CRYSTALLIZE_ACCESS_TOKEN_ID" \
            -H "x-crystallize-access-token-secret:$CRYSTALLIZE_ACCESS_TOKEN_SECRET" \
            -H "content-type: application/json" \
          -d '{"query":"{ catalogue(path:\"/red-nail-polish\", version:draft, language:\"en\"){name} }"}' \
            | jq -e '.data.catalogue.name' >/dev/null
